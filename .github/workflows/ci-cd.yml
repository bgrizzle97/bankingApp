# High-Security Banking Application CI/CD Pipeline
# Phase 1: Foundation & Core Infrastructure

name: Banking App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage/

    - name: Run security tests
      run: dotnet test --no-build --verbosity normal --configuration Release --filter Category=Security

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage.info
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Container Security
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build backend image
      run: docker build -t banking-app-backend:latest ./backend/

    - name: Build frontend image
      run: docker build -t banking-app-frontend:latest ./frontend/

    - name: Run Trivy vulnerability scanner on backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'banking-app-backend:latest'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Run Trivy vulnerability scanner on frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'banking-app-frontend:latest'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-backend-results.sarif'

    - name: Upload frontend scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-frontend-results.sarif'

  # Infrastructure Testing
  infrastructure-test:
    name: Infrastructure Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Setup AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan -out=tfplan

    - name: Run Checkov security scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload infrastructure scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'checkov-results.sarif'

  # Build and Push Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, container-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-push, infrastructure-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-east-1 --name banking-app-cluster-development

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f infrastructure/k8s/
        kubectl rollout restart deployment/banking-app-backend -n banking-app
        kubectl rollout restart deployment/banking-app-frontend -n banking-app

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/banking-app-backend -n banking-app --timeout=300s
        kubectl rollout status deployment/banking-app-frontend -n banking-app --timeout=300s

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, infrastructure-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-east-1 --name banking-app-cluster-production

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f infrastructure/k8s/
        kubectl rollout restart deployment/banking-app-backend -n banking-app
        kubectl rollout restart deployment/banking-app-frontend -n banking-app

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/banking-app-backend -n banking-app --timeout=300s
        kubectl rollout status deployment/banking-app-frontend -n banking-app --timeout=300s

    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running smoke tests..."

  # Security Compliance Check
  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    needs: [security-scan, container-security, infrastructure-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run compliance checks
      run: |
        # Add compliance checks here
        echo "Running compliance checks..."
        
        # Check for secrets in code
        if grep -r "password\|secret\|key" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=bin --exclude-dir=obj; then
          echo "WARNING: Potential secrets found in code"
          exit 1
        fi

        # Check for hardcoded URLs
        if grep -r "http://" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=bin --exclude-dir=obj; then
          echo "WARNING: HTTP URLs found in code"
          exit 1
        fi

        echo "Compliance checks passed" 